name: Publish FA Game to Diawi or Store

on: 
  workflow_call:
    inputs:
      platform:
        description: 'Distribution platform'     
        required: true
        type: choice
        default: 'Android' 
        options:
        - Android
        - iOS 
      buildType:
        description: 'Build type'     
        required: true
        type: choice
        default: 'Diawi' 
        options:
        - Diawi
        - Store
      fabrikaVersion:
        description: 'The version of fabrika to use'     
        required: false
        default: 'master' 
        type: string
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_SERIAL:
        required: true
      DIAWI_TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      ANDROID_PACKAGE_NAME:
        required: true
      GOOGLE_PLAY_KEY_FILE:
        required: true
      ANDROID_PROD_KEYSTORE_BASE64:
        required: true
      ANDROID_PROD_KEYSTORE_PASS:
        required: true
      ANDROID_PROD_KEYALIAS:
        required: true
      ANDROID_PROD_KEYALIAS_PASS:
        required: true
      ANDROID_DEV_KEYSTORE_BASE64:
        required: true
      ANDROID_DEV_KEYSTORE_PASS:
        required: true
      ANDROID_DEV_KEYALIAS:
        required: true
      ANDROID_DEV_KEYALIAS_PASS:
        required: true
      IOS_APP_ID:
        required: true
      APPLE_DEVELOPER_EMAIL:
        required: true
      APPLE_CONNECT_EMAIL:
        required: true
      APPLE_TEAM_ID:
        required: true
      APPLE_TEAM_NAME:
        required: true
      APPSTORE_KEY_ID:
        required: true
      APPSTORE_ISSUER_ID:
        required: true
      APPSTORE_P8:
        required: true
      MATCH_URL:
        required: true
      MATCH_GIT_PRIVATE_KEY:
        required: true
      MATCH_PASSWORD:
        required: true

jobs:

# IOS

  buildIOS:
    name: Build for iOS
    runs-on: ubuntu-latest
    if: inputs.platform == 'Both' || inputs.platform == 'iOS'
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-build-iOS-
            Library-build-

      - name: Build unity project
        id: build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: iOS
          versioning: Semantic

      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: build-iOS
          path: build/iOS

  releaseIOS:
    name: Release iOS
    runs-on: macos-latest
    needs: buildIOS
    if: inputs.platform == 'Both' || inputs.platform == 'iOS'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-iOS
          path: build/iOS

      - name: Setup Fastlane
        uses: furious-avocado/fabrika/.github/actions/setup_fastlane@${{ inputs.fabrikaVersion }}
        with:
          fabrikaVersion: ${{ inputs.fabrikaVersion }}
      
      - name: Ruby setup
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0
          bundler-cache: true

      - name: CocoaPods cache
        uses: actions/cache@v2
        with:
          path: ${{ format('{0}/build/iOS/iOS/Pods', github.workspace) }}
          key: Pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            Pods-
      
      - name: Fastlane
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
          MATCH_URL: ${{ secrets.MATCH_URL }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}
          IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
          IOS_MATCH_APP_ID: ${{ secrets.IOS_MATCH_APP_ID }}
          IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
          DIAWI_TOKEN: ${{ secrets.DIAWI_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          LANE: ${{ inputs.buildType == 'Diawi' && 'upload_diawi' || 'upload_testflight' }}
          BUILD_VERSION: ${{needs.buildIOS.outputs.buildVersion}}
          PROJECT_NAME: ${{ repository.name }}
        run: |
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          find $IOS_BUILD_PATH -type f -iname "usymtool" -exec chmod +x {} \;
          bundle exec fastlane ios $LANE

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-iOS
    
# ANDROID
  
  buildAndroid:
    name: Build for Android
    runs-on: ubuntu-latest
    if: inputs.platform == 'Both' || inputs.platform == 'Android'
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-build-Android-
            Library-build-

      - name: Build unity project
        id: build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: Android
          versioning: Semantic
          androidTargetSdkVersion: AndroidApiLevel30
          androidAppBundle: ${{inputs.buildType == 'Store'}}
          androidKeystoreName: fa.keystore
          androidKeystoreBase64: ${{ inputs.buildType == 'Store' && secrets.ANDROID_PROD_KEYSTORE_BASE64 || secrets.ANDROID_DEV_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ inputs.buildType == 'Store' && secrets.ANDROID_PROD_KEYSTORE_PASS || secrets.ANDROID_DEV_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ inputs.buildType == 'Store' && secrets.ANDROID_PROD_KEYALIAS || secrets.ANDROID_DEV_KEYALIAS }}
          androidKeyaliasPass: ${{ inputs.buildType == 'Store' && secrets.ANDROID_PROD_KEYALIAS_PASS || secrets.ANDROID_DEV_KEYALIAS_PASS }}

      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: build-Android
          path: build/Android

  releaseAndroid:
    name: Release Android
    runs-on: ubuntu-latest
    needs: buildAndroid
    if: inputs.platform == 'Both' || inputs.platform == 'Android'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-Android
          path: build/Android

      - name: Setup Fastlane
        uses: furious-avocado/fabrika/.github/actions/setup_fastlane@${{ inputs.fabrikaVersion }}
        with:
          fabrikaVersion: ${{ inputs.fabrikaVersion }}

      - name: Ruby setup
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0
          bundler-cache: true

      - name: Add Authentication
        env:
          GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
          GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/api-fa.json', github.workspace) }}
        run: echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH

      - name: Fastlane
        env:
          GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/api-fa.json', github.workspace) }}
          ANDROID_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
          DIAWI_TOKEN: ${{ secrets.DIAWI_TOKEN }}
          ANDROID_BUILD_FILE_PATH: ${{ format('{0}/build/Android/Android.{1}', github.workspace, inputs.buildType == 'Diawi' && 'apk' || 'abb') }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          BUILD_VERSION: ${{needs.buildAndroid.outputs.buildVersion}}
          PROJECT_NAME: ${{ repository.name }}
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'android ${{ inputs.buildType == 'Diawi' && 'upload_diawi' || 'upload_internal' }}'

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-Android

  